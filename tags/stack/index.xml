<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stack on Cebola Security</title>
    <link>https://mdanilor.github.io/tags/stack/</link>
    <description>Recent content in stack on Cebola Security</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 30 Nov 2022 13:08:50 -0300</lastBuildDate>
    
	<atom:link href="https://mdanilor.github.io/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Cracking Windows Kernel with HEVD] Chapter 3: Can we rop our way into triggering our shellcode?</title>
      <link>https://mdanilor.github.io/posts/hevd-3/</link>
      <pubDate>Wed, 30 Nov 2022 13:08:50 -0300</pubDate>
      
      <guid>https://mdanilor.github.io/posts/hevd-3/</guid>
      <description>Cracking HackSys Extreme Vulnerable Driver: Can we rop our way into triggering our shellcode? When are we building the payload here? Patience! Thus far we have seen the basics to correctly assemble a usable payload. Now that we have all the tools necessary, let&amp;rsquo;s finally create our payload. May the force be with us. If you missed the previous posts, make sure to check them out.
Our ROP chain should look something like this:</description>
    </item>
    
    <item>
      <title>[Cracking Windows Kernel with HEVD] Chapter 2: Is there a way to bypass kASLR, SMEP and KVA Shadow?</title>
      <link>https://mdanilor.github.io/posts/hevd-2/</link>
      <pubDate>Tue, 29 Nov 2022 00:00:00 -0300</pubDate>
      
      <guid>https://mdanilor.github.io/posts/hevd-2/</guid>
      <description>Cracking HackSys Extreme Vulnerable Driver: Is there a way to bypass kASLR, SMEP and KVA Shadow? Where to redirect the execution flow? On the previous post, we wrote a program that would crash our driver and leave us with a BSOD. We managed to discover the return address offset and redirect the program flow to an arbitrary address. But we were left with a question: what now? Where to redirect the execution flow?</description>
    </item>
    
    <item>
      <title>[Cracking Windows Kernel with HEVD] Chapter 1: Will this driver ever crash?</title>
      <link>https://mdanilor.github.io/posts/hevd-1/</link>
      <pubDate>Sun, 11 Sep 2022 00:00:50 -0300</pubDate>
      
      <guid>https://mdanilor.github.io/posts/hevd-1/</guid>
      <description>Cracking HackSys Extreme Vulnerable Driver: will this driver ever crash? Writing a BSOD crash Last time we focused on setting up the environment. This time we will try to understand the vulnerability and make our system crash! Let&amp;rsquo;s dive in!
The vulnerable code (...) ULONG KernelBuffer[BUFFER_SIZE] = { 0 }; (...) // Verify if the buffer resides in user mode ProbeForRead(UserBuffer, sizeof(KernelBuffer), (ULONG)__alignof(UCHAR)); DbgPrint(&amp;quot;[+] UserBuffer: 0x%p\n&amp;quot;, UserBuffer); DbgPrint(&amp;quot;[+] UserBuffer Size: 0x%zX\n&amp;quot;, Size); DbgPrint(&amp;quot;[+] KernelBuffer: 0x%p\n&amp;quot;, &amp;amp;KernelBuffer); DbgPrint(&amp;quot;[+] KernelBuffer Size: 0x%zX\n&amp;quot;, sizeof(KernelBuffer)); (.</description>
    </item>
    
    <item>
      <title>[Cracking Windows Kernel with HEVD] Chapter 0: Where do I start?</title>
      <link>https://mdanilor.github.io/posts/hevd-0/</link>
      <pubDate>Mon, 29 Aug 2022 13:08:50 -0300</pubDate>
      
      <guid>https://mdanilor.github.io/posts/hevd-0/</guid>
      <description>Cracking HackSys Extreme Vulnerable Driver: where do I start? What is this? Hello! Previously we exploited vulnerable linux driver by invictus-0x90. If you missed, not to worry: this series is totally unrelated, since we&amp;rsquo;ll be exploiting the vulnerable Windows driver HEVD. However, if you are a curious one, make sure to check the other post!
Today we&amp;rsquo;ll be attacking HEVD: HackSys Extreme Vulnerable Driver. This Windows driver is intentionally vulnerable to many memory corruption vulnerabilities (stack overflow, int overflow, use after free, type confusion, to name a few).</description>
    </item>
    
    <item>
      <title>Understanding binary protections (and how to bypass) with a dumb example</title>
      <link>https://mdanilor.github.io/posts/memory-protections/</link>
      <pubDate>Mon, 01 Feb 2021 17:30:00 -0300</pubDate>
      
      <guid>https://mdanilor.github.io/posts/memory-protections/</guid>
      <description>Hi! Long time no see, huh? I must apologize for my lousy post schedule. In spite of covid-19 outbreak forcing us to stay home, it appears that I&amp;rsquo;ve never had less time to spare in my life. Well, let&amp;rsquo;s get to it.
Memory corruption issues often lead to pretty serious vulnerabilities. It is not uncommon for a stack or heap overflow, use-after-free, double free and others to lead to code execution.</description>
    </item>
    
    <item>
      <title>Hello, kernel: Exploiting an intentionally vulnerable Linux driver</title>
      <link>https://mdanilor.github.io/posts/hello-kernel/</link>
      <pubDate>Tue, 28 Apr 2020 18:01:34 -0300</pubDate>
      
      <guid>https://mdanilor.github.io/posts/hello-kernel/</guid>
      <description>Hello, kernel: Exploiting an intentionally vulnerable Linux driver Intro and setup About a month ago I started doing some research during both my freetime and work hours (shout out to SiDi for allowing me the time!!!) on Kernel Linux exploitation. I find this to be not only a fascinating topic, but a very useful one too, since one of my primary functions at work is to assess the Android system.</description>
    </item>
    
  </channel>
</rss>